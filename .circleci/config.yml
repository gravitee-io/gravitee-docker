version: 2.1

orbs:
  docker: circleci/docker@2.8.2
  keeper: gravitee-io/keeper@0.6.2
  aquasec: gravitee-io/aquasec@1.0.4

commands:
  prepare-docker-context:
    steps:
      - setup_remote_docker
      - keeper/env-export:
          secret-url: keeper://cooU9UoXIk8Kj0hsP2rkBw/field/login
          var-name: DOCKER_LOGIN
      - keeper/env-export:
          secret-url: keeper://cooU9UoXIk8Kj0hsP2rkBw/field/password
          var-name: DOCKER_PASSWORD
      - docker/check

jobs:
  build-and-push-java:
    executor: docker/docker
    parameters:
      alpine_version:
        type: string
        default: ""
    steps:
      - checkout
      - prepare-docker-context
      - when :
          condition: << parameters.alpine_version >>
          steps:
            - run:
                command: |
                  docker context create tls-env
                  docker buildx create tls-env --use
                  docker buildx build --push --platform=linux/arm64,linux/amd64 --build-arg ALPINE_VERSION=<< parameters.alpine_version >> -t graviteeio/java:17-alpine-<< parameters.alpine_version >> -f images/java/Dockerfile images/java/
      - unless:
          condition: << parameters.alpine_version >>
          steps:
            - run:
                command: |
                  docker context create tls-env
                  docker buildx create tls-env --use
                  docker buildx build --push --platform=linux/arm64,linux/amd64 -t graviteeio/java:17 -f images/java/Dockerfile images/java/

  build-and-push-java21:
    executor: docker/docker
    steps:
      - checkout
      - prepare-docker-context
      - run:
          command: |
            docker context create tls-env
            docker buildx create tls-env --use
            docker buildx build --push --platform=linux/arm64,linux/amd64 -t graviteeio/java:21 -f images/java21/Dockerfile images/java21/

  build-and-push-nginx:
    executor: docker/docker
    parameters:
      version:
        type: string
    steps:
      - checkout
      - prepare-docker-context
      - run:
          command: |
            docker context create tls-env
            docker buildx create tls-env --use
            docker buildx build --push --platform=linux/arm64,linux/amd64 --build-arg NGINX_VERSION=<< parameters.version >> -t graviteeio/nginx:<< parameters.version >> -f images/nginx/Dockerfile images/nginx/        

  build-and-push-git-http-server:
    executor: docker/docker
    steps:
      - checkout
      - prepare-docker-context
      - docker/build:
          docker-context: images/git-http-server
          image: graviteeio/git-http-server
          path: images/git-http-server
          tag: '1.1.0'
      - docker/push:
          digest-path: /tmp/digest.txt
          image: graviteeio/git-http-server
          tag: '1.1.0'
      - run:
          command: |
            echo "Digest git-http-server image is: $(</tmp/digest.txt)"

  build-and-push-k6:
    executor: docker/docker
    steps:
      - checkout
      - prepare-docker-context
      - run:
          command: |
            docker context create tls-env
            docker buildx create tls-env --use
            docker buildx build --push --platform=linux/arm64,linux/amd64 -t graviteeio/k6:latest -f images/k6/Dockerfile images/k6/

  build-and-push-rpmsign:
    executor: docker/docker
    steps:
      - checkout
      - prepare-docker-context
      - docker/install-docker-tools
      - keeper/env-export:
          secret-url: keeper://rRi5mBfSPLl5jMvaBhqD8A/custom_field/GPG_KEY_NAME
          var-name: GPG_KEY_NAME
      - keeper/env-export:
          secret-url: keeper://rRi5mBfSPLl5jMvaBhqD8A/custom_field/GPG_KEY_PUBLIC
          var-name: GPG_KEY_PUBLIC
      - keeper/env-export:
          secret-url: keeper://rRi5mBfSPLl5jMvaBhqD8A/custom_field/GPG_KEY_PRIVATE
          var-name: GPG_KEY_PRIVATE
      - keeper/env-export:
          secret-url: keeper://rRi5mBfSPLl5jMvaBhqD8A/custom_field/GPG_KEY_PASSPHRASE
          var-name: GPG_KEY_PASSPHRASE
      - run:
          command: |
            docker context create tls-env
            docker buildx create tls-env --use
            pushd images/rpmsign > /dev/null
              docker compose build rpmsign
            
              docker compose run --rm -ti \
                -e "GPG_KEY_NAME=${GPG_KEY_NAME}" \
                -e "GPG_KEY_PUBLIC=${GPG_KEY_PUBLIC}" \
                -e "GPG_KEY_PRIVATE=${GPG_KEY_PRIVATE}" \
                -e "GPG_KEY_PASSPHRASE=${GPG_KEY_PASSPHRASE}" \
                rpmsign-test
              
              docker compose push rpmsign
            popd > /dev/null

  add-docker-images-in-aqua:
    parameters:
      docker-image-name:
        type: string
      version:
        type: string
    environment:
      DOCKER_IMAGE_NAME: << parameters.docker-image-name >>
      VERSION: << parameters.version >>
    docker:
      - image: cimg/base:stable
    resource_class: small
    steps:
      - keeper/env-export:
          secret-url: keeper://QeHHkvALPob4pgs1hMd9Gw/custom_field/API Key
          var-name: AQUA_KEY
      - keeper/env-export:
          secret-url: keeper://QeHHkvALPob4pgs1hMd9Gw/custom_field/Secret
          var-name: AQUA_SECRET
      - keeper/env-export:
          secret-url: keeper://LYg-wdlM5UDzSqFFH6Kyig/field/login
          var-name: AQUA_USERNAME
      - keeper/env-export:
          secret-url: keeper://LYg-wdlM5UDzSqFFH6Kyig/field/password
          var-name: AQUA_PASSWORD
      - keeper/env-export:
          secret-url: keeper://QeHHkvALPob4pgs1hMd9Gw/custom_field/ScannerToken
          var-name: SCANNER_TOKEN
      - keeper/env-export:
          secret-url: keeper://TIlcGPFq4rN5GvgnZb9hng/field/password
          var-name: GITHUB_TOKEN
      - aquasec/install_billy
      - aquasec/pull_aqua_scanner_image
      - prepare-docker-context
      - aquasec/register_artifact:
          artifact_to_register: graviteeio/<< parameters.docker-image-name >>:<< parameters.version >>
          debug: true
      - aquasec/scan_docker_image:
          docker_image_to_scan: graviteeio/<< parameters.docker-image-name >>:<< parameters.version >>
          scanner_url: https://82fb8f75da.cloud.aquasec.com

workflows:
  run_every_week:
    when:
      and:
        - equal: [ master, << pipeline.git.branch >> ]
    jobs:
      - build-and-push-java:
          name: build java with alpine 3.17
          context: cicd-orchestrator
      - add-docker-images-in-aqua:
          context: cicd-orchestrator
          requires:
            - build java with alpine 3.17
          docker-image-name: java
          version: "17"
      - build-and-push-java:
          name: build java with alpine 3.18
          context: cicd-orchestrator
          alpine_version: "3.18"
      - add-docker-images-in-aqua:
          context: cicd-orchestrator
          requires:
            - build java with alpine 3.18
          docker-image-name: java
          version: "17-alpine-3.18"
      - build-and-push-java:
          name: build java with alpine 3.20
          context: cicd-orchestrator
          alpine_version: "3.20"
      - add-docker-images-in-aqua:
          context: cicd-orchestrator
          requires:
            - build java with alpine 3.20
          docker-image-name: java
          version: "17-alpine-3.20"
      - build-and-push-java21:
          context: cicd-orchestrator
      - add-docker-images-in-aqua:
          context: cicd-orchestrator
          requires:
            - build-and-push-java21
          docker-image-name: java
          version: "21"
      - build-and-push-nginx:
          name: build nginx 1.26.3
          context: cicd-orchestrator
          version: "1.26.3"
      - add-docker-images-in-aqua:
          context: cicd-orchestrator
          requires:
            - build nginx 1.26.3
          docker-image-name: nginx
          version: "1.26.3"
      - build-and-push-nginx:
          name: build nginx 1.27.4
          context: cicd-orchestrator
          version: "1.27.4"
      - add-docker-images-in-aqua:
          context: cicd-orchestrator
          requires:
            - build nginx 1.27.4
          docker-image-name: nginx
          version: "1.27.4"
      - build-and-push-git-http-server:
          context: cicd-orchestrator
      - add-docker-images-in-aqua:
          context: cicd-orchestrator
          requires:
            - build-and-push-git-http-server
          docker-image-name: git-http-server
          version: "1.1.0"
      - build-and-push-k6:
          context: cicd-orchestrator
      - add-docker-images-in-aqua:
          context: cicd-orchestrator
          requires:
            - build-and-push-k6
          docker-image-name: k6
          version: "latest"
      - build-and-push-rpmsign:
          context: cicd-orchestrator
      - add-docker-images-in-aqua:
          context: cicd-orchestrator
          requires:
            - build-and-push-rpmsign
          docker-image-name: rpmsign
          version: "latest"
